#foreach($column in $columns)
#if($column.isPk == "1")
#set($Key=$column.javaField)
#end
#end

<template>
  <a-card :style="{ boxShadow: 'none' }" :bordered="false" :bodyStyle="{ padding: '0' }">
    <a-table
      @change="pageChange"
      table-layout="fixed"
      sticky
      :row-selection="{
        selectedRowKeys: ${businessName}Keys,
        onChange: (k: any[]) => (${businessName}Keys = k),
      }"
      bordered
      :loading="${businessName}Table.loading"
      :pagination="false"
      :customRow="customRow"
      :rowKey="${businessName}Table.rowKey"
      :columns="formatColumns(${businessName}Columns)"
      :data-source="${businessName}Table.data"
    >
      <template #bodyCell="{ column, record }">
        <template v-if="column.key === 'operation'">
          <a-dropdown-button trigger="click"
          @click="${businessName}Edit(record.$Key)"
          @open-change="openChange(record as ${ModuleName}${BusinessName})">
            <EditOutlined />
            <template #overlay>
              <a-menu>
                 <div v-perm="'${moduleName}:${businessName}:export'">
                    <a-menu-item @click="${businessName}Export">
                      <template #icon>
                        <ExportOutlined />
                      </template>
                      导出
                    </a-menu-item>
                 </div>
                 <div v-perm="'system:notice:remove'">
                    <a-menu-item @click="${businessName}Delete(record.$Key)">
                      <template #icon>
                        <DeleteOutlined />
                      </template>
                      删除
                    </a-menu-item>
                 </div>
              </a-menu>
            </template>
          </a-dropdown-button>
        </template>
      </template>
    </a-table>
  </a-card>
</template>

<script setup lang="ts">
import type { ${ModuleName}${BusinessName} } from '@/api/modules/${moduleName}/${businessName}/types';
import { formatColumns } from '@/utils/table/table';
import { useArrayFilter } from '@vueuse/core';
import type { TablePaginationConfig } from 'ant-design-vue';
import type { FilterValue, SorterResult } from 'ant-design-vue/es/table/interface';
import { ${businessName}Columns } from '../../data/column';
import { ${businessName}Edit,${businessName}Delete,${businessName}Export } from '../../data/curd';
import { ${businessName}Form } from '../../data/form';
import { ${businessName}Keys,  ${businessName}Query, ${businessName}Table } from '../../data/table';
import { useCloned } from '@vueuse/core';

const openChange = (record: ${ModuleName}${BusinessName}) => {
  ${businessName}Form.value = useCloned(record).cloned.value;
};

/* 行事件 */
const customRow = (record: ${ModuleName}${BusinessName}) => {
  return {
    onClick() {
      const id= (record as any)[${businessName}Table.value.rowKey]
      ${businessName}Form .value = record;
      if (!${businessName}Keys.value.includes(id)) {
         ${businessName}Keys.value.push(id);
      } else {
         ${businessName}Keys.value = useArrayFilter(${businessName}Keys.value, e => e !== id).value;
     }
     ${businessName}Keys.value = [record.$Key];
    },
    onDblclick() {
       ${businessName}Edit(record.$Key);
    },
  };
};

/* 分页事件触发 */
const pageChange = (
  pagination: TablePaginationConfig,
  filters: Record<string, FilterValue>,
  sorter: SorterResult<${ModuleName}${BusinessName}> | SorterResult<${ModuleName}${BusinessName}>[],
) => {
  ${businessName}Query.value.pageNum = pagination.current!;
  ${businessName}Query.value.pageSize = pagination.pageSize!;
};
</script>

<style lang="scss" scoped></style>
